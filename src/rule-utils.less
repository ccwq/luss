@import (once) "vars";

//设置了单位
.__write(@key,@value,@defaultUnit:px) when not(get-unit(@value)=~"") or not(isnumber(@value)){
        @{key}:@value;
}


//没有设置单位的情况
.__write(@key,@value,@defaultUnit:px) when(get-unit(@value)=~"") and (isnumber(@value)){
        @{key}:unit(@value,@defaultUnit);
}



.__class_write(@className,@keyList,@valueList){
    .@{className}{
        .__writes(@keyList,@valueList);
    }
}


.__class_write-hover(@className,@keyList,@valueList){
    .@{className}{
        &:hover{
            .__writes(@keyList,@valueList);
        }
    }
}

.__class_write_with_important(@className,@keyList,@valueList){
    .__class_write(@className,@keyList,@valueList);
    .__class_write(~"@{className}-i",@keyList,@valueList) !important;
}

.__class_write_with_important-hover(@className,@keyList,@valueList){
    .__class_write-hover(~"@{className}-hover",@keyList,@valueList);
    .__class_write-hover(~"@{className}-hover-i",@keyList,@valueList) !important;
}

.__writes(@keyList,@value) when (length(@value)=1){
    @leng:length(@keyList);
    ._loop(@n) when(@n<=@leng){
        @key:extract(@keyList,@n);
        .__write(@key,@value,~"");
        ._loop(@n + 1);
    }
    ._loop(1)
}

.__writes(@keyList, @valueList) when (length(@valueList)>1){
    @leng:length(@keyList);
    ._loop(@n) when(@n<=@leng){
        @key:extract(@keyList,@n);
        @value:extract(@valueList,@n);
        .__write(@key,@value,~"");
        ._loop(@n + 1);
    }
    ._loop(1)
}



//透明度调整
._alpha(@val:80){ opacity: @val * 0.01; filter: alpha(opacity=@val); }
._op(@value){._alpha(@value * 100)}

//横向padding
._ph(@value:auto){padding-left: @value; padding-right: @value;}
//纵向padding
._pv(@value:auto){padding-top: @value; padding-bottom: @value;}
//横向margin
._mh(@value:auto){margin-left: @value; margin-right: @value;}
//纵向margin
._mv(@value:auto){margin-top: @value; margin-bottom: @value;}


//block尺寸，同时设置长宽
._size(@size){._size(@size,@size)}
._size(@width,@height){
    .__write(width,@width,px);
    .__write(height,@height,px);
}

//设置高度时，同时设置line-height
._size_lh(@width,@height){
    ._size(@width,@height);
    .__write(line-height,@height,px)
}

._size_lh(@s){
    ._size_lh(@s,@s)
}


//设置尺寸时候，同时设置margin没size尺寸的一般（负）
._size_rever_margin(@width,@height){
    ._size(@width,@height);
    margin-left:-@width * 0.5;
    margin-top :-@height*0.5;
}

._size_rever_margin(@size){
    ._size_rever_margin(@size,@size);
}


._size_revert_margin_lh(@width,@height){
    ._size_rever_margin(@width,@height);
    line-height: @height;
}

._size_revert_margin_lh(@size){
    ._size_revert_margin_lh(@size,@size);
}

._fillin(@value:0){
    .__writes(left top right bottom, @value)
}


//reset;
.reset(){
    html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em,
    img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center, dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption,
    tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed, figure, figcaption, footer, header, menu, nav, output, ruby, section,
    summary,time, mark, audio, video {
        margin: 0;padding: 0;border: 0;font-size: 100%;vertical-align: baseline;
    }

    h1, h2, h3, h4, h5, h6{ font-weight: 700;}

    /* HTML5 display-role reset for older browsers */
    article, aside, details, figcaption, figure, footer, header, menu, nav, section { display: block;}
    body {line-height: 1; font-size: 12px;}
    ol, ul{ list-style: none; }
    blockquote, q {quotes: none;}
    blockquote:before, blockquote:after, q:before, q:after {content: '';content: none;}table {border-collapse: collapse;border-spacing: 0;}

    i,em{font-style: normal;}
    a{ text-decoration: none;}
}


//ie旋转
//@ang只支持deg
._ieRotate(@ang,@width,@height){
    @deg:pi()*2 - unit(convert(unit(@ang,deg),"rad"));          //ie角度正好和w3c旋转相反
    @sin:sin(@deg);
    @cos:cos(@deg);
    @fsin:-@sin;
    @fcos:-@cos;

    @w:unit(@width);
    @h:unit(@height);
    @dx:-@w/2*@cos+@h/2*@sin+@w/2;
    @dy:-@w/2*@sin - @h/2*@cos+@h/2;

    filter:progid:DXImageTransform.Microsoft.Matrix(Dx=@dx, Dy=@dy,M11=@cos,M12=@sin,M21=@fsin,M22=@cos,sizingMethod="auto expand");
}

//ie 的旋转
._ieRotate(@ang,@size){
    .ieRotate(@ang, @size, @size);
}



//形成三角
.triangle(@size,@dir:left,@color:#08c,@blankColor:transparent){
    border: @size solid @blankColor;
    border-@{dir}-width: 0;
    ._size_lh(0);
    ._dib;


    .____write() when(@dir=right){border-left-color:@color;}
    .____write() when(@dir=bottom){border-top-color:@color;}
    .____write() when(@dir=left){border-right-color:@color;}
    .____write() when(@dir=top){border-bottom-color:@color;}
    .____write;
}

//形成斜三角(45整数倍三角)
.triangle45(@size,@dira:left,@dirb:bottom,@color:#08c,@blankColor:transparent){
    border: @blankColor solid @size * 0.5;
    border-@{dira}-color:@color;
    border-@{dirb}-color:@color;
    line-height: 0;
    font-size: 0;
    ._size(0);
    &:extend(.dib);
}
//----形成三角



//用来生一个宽度序列
//参数1 @main_w有三种形式
//  形式1:1000px              表示总宽度为1000,单元格间距为0
//  形式2:1000px 12px         表示总宽度为1000,单元格间距为12px，无两边空白
//  形式3:1000px _12px        表示总宽度为1000,单元格间距为12px，两边有空白
//参数2 @col_width_list 传入1-(n-1)各单元格宽度,最后一个单元格宽度由计算获得
//举例 .row1{.gen_grid(1000px 10px,60px,100px,90px,88px, 180px); >*{.iblock};}
.gen_grid(@main_w__gap,@col_width_list){
    @leng:length(@col_width_list);

    //分析第一参数
    @p_list:`(function(index){
		index = index || 0;
		var para = "@{main_w__gap}".replace(/\[|\]|,/g,"");
		var leng = @{leng};
		var ar = para.split(" ");
		ar[1] = ar[1] || "0px";
		var main_w = ar[0];
		var gap_w=ar[1].replace(/^_|\-/,"");
		if(/^\_/.test(ar[1])){
			leng = leng + 2;
		}else{
			leng = leng;
		}
		var resultList = [main_w, gap_w,leng];
		return resultList[index-1];
	})`;

    //提取参数1的定义
    @main_w:~`@{p_list}(1)`;
    @gap_w:~`@{p_list}(2)`;
    @gap_num:~`@{p_list}(3)`;


    //计算最后一个单元格宽度
    @last_w:~`(function(){
		var arg = eval("@{col_width_list}".replace(/px/g,""));
		var main_w = parseInt("@{main_w}");

		var gap_num = @{gap_num};
		var gap_w = parseInt("@{gap_w}");
		var w=0;

		//只有两列的情况
		if(arg.length === undefined) arg = [arg];

		arg.map(function(n){
			w+=n;
		});

		var lstw = (main_w - w - gap_num*gap_w);
		bindvar("gd.lastw",lstw);
		return lstw;
	})()`;




    width:~`(function(){
		var main_w = parseInt("@{main_w}");
		var gap_num = @{gap_num};
		var leng = @{leng};
		var gap_w = parseInt("@{gap_w}");


		if(gap_num>leng){
			return (main_w - gap_w) + "px; padding-left:" + gap_w + "px";
		}else{
			return main_w + "px";
		}
	})()`;


    //定义循环
    .gen_grid_loop(@times,@paras) when(@times >0){
        .gen_grid_loop(@times - 1, @paras);
        >.cell-@{times}{
            width: extract(@paras,@times);
            margin-right: @gap_w;
        }
    }

    //生成1-(n-1)的宽度
    .gen_grid_loop(@leng , @col_width_list);

    //生成n的宽度
    @leng_p1:@leng+1;
    >.cell-last,>.cell-@{leng_p1}{
        width:unit(@last_w,px);
    }

    //消除间隔
    font-size: 0;
    //white-space: normal;

    //对单元格的一些公共设置
    >*{
        &:extend(.dib); font-size: @fsize;
    }
}

.gen_grid_line(@main_w__gap,@col_width_list){
    .gen_grid(@main_w__gap,@col_width_list);
    white-space: nowrap;
    >*{white-space: normal;}
}

//
._colsets(@colList,@fullWidth,@innerGap:0,@edgeGap:0){
    @leng:@length(@colList);


    @lastWidth:@fullWidth;
    ._loop(@n) when(@n<=@length){
        @w:extract(@colList,@n);

        //@lastWidth

        >*:nth-child(@{n}){
            width:@w;
            margin-right: @innerGap;
        }

        ._loop(@n+1);
    }
    ._loop(1);
}


//生成列均等的网格布局
//@main_width整体宽度
//@gap间隔
//@n网格猎数
//@edge_gap间隔是否在边沿
//@cell_width_offset宽度微调
._gen_grid_average(@main_width,@n,@gap:0,@edge_gap:false,@cell_width_offset:0){
    .gen_comm(){
        padding-top: @gap;
        padding-bottom: @gap;
        //margin-left: -@gap/2;
        text-indent: 0;
        left: -@gap*0.5;
        position: relative;
        font-size: 0;

        >*{
            &:extend(.dib);
            font-size: 14px;
            min-height: @gap;
            margin-bottom: @gap;
            .margin_h(@gap*0.5);
        }
    }
    .gen(@main_width,@gap,@n,@edge_gap) when(@edge_gap = true){
        @cellw:(@main_width - (@n + 1)*@gap)/@n + @cell_width_offset;
        width: @main_width;
        padding-left: @gap;
        >*{
            width: @cellw;
        }
    }

    .gen(@main_width,@gap,@n,@edge_gap) when(@edge_gap = false){
        @cellw:(@main_width - (@n)*@gap)/@n + @cell_width_offset;
        width: @main_width + @gap;

        >*{
            width: @cellw;
        }
    }

    .gen_comm;
    .gen(@main_width,@gap,@n,@edge_gap);

}


//半透明背景，兼容ie
._bgcolor_alpha(@bgcolor: rgba(0,0,0,.51)){
    filter:progid:DXImageTransform.Microsoft.gradient(enabled='true',startColorstr = argb(@bgcolor), endColorstr=argb(@bgcolor));
    background-color:@bgcolor;
}

._bgcolor_alpha(@rgb,@alpha){
    @rgba:~`(function(){
		var obj = __get_rgba_object('@{rgb}',@{alpha});
		return getRGBA('@{rgb}',@{alpha});
	})(this)`;

    @argb_16:~`(function(){
		return getARGB('@{rgb}',@{alpha})
	})(this)`;

    filter:progid:DXImageTransform.Microsoft.gradient(enabled='true',startColorstr= @argb_16, endColorstr=@argb_16);
    background-color:@rgba;
}

.loopColorList(@list){
    @leng:length(@list);
    .loop(@n)when(@n>0){
        @cl:extract(@list,@n);
        @cl-val:@@cl;

        .__class_write_with_important(~"cl-@{cl}",    color,  @@cl);
        .cl-@{cl}-hover:hover{color:@@cl;}
        .cl-@{cl}-hover-i:hover{color:@@cl !important;}

        .__class_write_with_important(~"bg-@{cl}",    background-color,  @@cl);
        .bg-@{cl}-hover:hover{background-color:@@cl;}
        .bg-@{cl}-hover-i:hover{background-color:@@cl !important;}

        .__class_write_with_important(~"bd-@{cl}",    border-color,  @@cl);
        .loop(@n - 1);
    }
    .loop(@leng);
}

//蚂蚁线生成器
.ant-line-factory(@tick-color:@grey300, @tick-length:0.5em, @gap-length:0.75em,  @gap-color:transparent){
    background-image: repeating-linear-gradient(-45deg, @tick-color 0, @tick-color 0.25em, @gap-color 0, @gap-color @gap-length);
}



//规定表格个列的宽度和对齐方式,自动宽度传入-1
//ex: 0/auto 表示不干涉该列宽度
//.table-1{
//     .tableColSet(18em right 5em 2em, 15px, 0, 0, 10%);
//}
//.table-1第一列宽度18em,第二列15px,第三列自动...
.tableColSet(@rest...){
    .loop(@n) when (@n>0){
        >tbody>tr>*,>tr>*{
            @value:extract(@widthList,@n);
            @leng:length(@value);
            @width:extract(@value,1);
            @align:extract(@value,2);
            @paddingLeft:extract(@value,3);
            @paddingRight:extract(@value,4);
            &:nth-child(@{n}){

                & when(@width>0){



                    width: @width;
                }

                & when(iskeyword(@align)){
                    text-align:@align;
                }

                & when(isnumber(@paddingLeft)){
                    padding-left:@paddingLeft;
                }

                & when(isnumber(@paddingRight)){
                    padding-right:@paddingRight;
                }
            }
        }
        .loop(@n - 1);
    }


    @widthList:@rest;
    @le:length(@widthList);
    .loop(@le);
}


/**
参照js的String.prototype.padStrarts
@result:padStarts(foo, 5)[@__];
结果:00foo
 */
.padStarts(@string, @length:3, @padString:"0000000000"){
    @__:  replace(~"@{padString}@{string}", ".+(.{@{length}}?)$", "$1");
}

/**
针对浮点数优化的padStarts
@result:padStarts(foo, 5)[@__];
结果:00foo
 */
.floatPadStarts(@number, @length:3, @padString:"0000000000"){
    @nMod:mod(@number, 1);
    .calc() when (@nMod = 0){
        @__ :  .padStarts(@number, @length, @padString)[@__];
    }
    .calc() when not (@nMod = 0){
        @__ :  replace(~"@{padString}@{number}", ".+(.{@{length}}?)(?=\.)", "$1");
    }
    @__:.calc()[@__];
}



/**
 * 多个range使用
.eachRange(range(1,5) range(10,15), {
        hs:@value;
})
*/
.eachRange(@rangeLs, @rules){
    each(@rangeLs, {
        each(@value, {
            @rules();
        })
    })
}



